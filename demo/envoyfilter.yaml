# At Omio, this EnvoyFilter is injected on a service that 
# enables the devroute contract. We do this through an 
# Admission Webhook. The webhook can then insert a value 
# in SERVICE_NAME (see lua code) that mathes the service
# name where this EnvoyFilter runs.
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: devrouter-filter
  namespace: echo-server
spec:
  workloadSelector:
    labels:
      app: echo-server
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: envoy.http_connection_manager
            subFilter:
              name: envoy.router
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.lua
        config:
          # the lua code should be inserted here and SERVICE_NAME should be
          # replaced by the name of the service where this EnvoyFilter lives.
          # If you have full control of Istio installation, you can simply 
          # modify Istio's side-car PodSpec to contain an environment variable 
          # that can be then read from this code. 
          inlineCode: |
            -- The service name in which this filter is running.
            -- This global variable has to be replaced when applying the 
            -- envoy filter. At Omio, we use a mutating webhook to do this.
            SERVICE_NAME = "echo-server"

            -- get_req_body extracts the body from request_handle 
            -- if body is nil, returns the empty string
            function get_req_body(request_handle)
                local req_body_buf = request_handle:body() 
                if req_body_buf ~= nil then
                    return req_body_buf:getBytes(0, req_body_buf:length())
                end
                return ""
            end

            -- escape_lua_magic escapes str in case it has 
            -- lua magic characters. 
            function escape_lua_magic(str)
                -- lua magic characters:
                -- (   )   .   %   +   â€“   *   ?   [   ^   $
                local pattern = "[%(%)%.%%%+%-%*%?%[%^%$]"
                local replacements = {
                    ['('] = "%(",
                    [')'] = "%)",
                    ['.'] = "%.",
                    ['%'] = "%%",
                    ['+'] = "%+",
                    ['-'] = "%-",
                    ['*'] = "%*",
                    ['?'] = "%?",
                    ['['] = "%[",
                    ['^'] = "%^",
                    ['$'] = "%$"
                }
                return string.gsub(str, pattern, replacements)
            end

            -- envoy_on_request checks for the presence of `x-devroute` contract header 
            -- and detours this request to devrouter if there is a service match. A service
            -- specified in the contract header matches this filter if it's equal to SERVICE_NAME.
            function envoy_on_request(request_handle)
                local contract = request_handle:headers():get("x-devroute")
                if contract == nil then
                    return
                end

                -- check if service name as specified in contract header matches the service name this 
                -- EnvoyFilter is running in.
                if string.match(contract, '.*["\']' .. escape_lua_magic(SERVICE_NAME) .. '["\'].*') == nil then
                    return 
                end

                -- add matched header so devrouter can pick the right ip:host among 
                -- multiple services specified in contract.
                request_handle:headers():add("x-devroute-matched", SERVICE_NAME)
                -- preserve request headers
                local in_headers = {}
                for key, value in pairs(request_handle:headers()) do
                    in_headers[key] = value
                end
                
                -- call devrouter
                in_headers["authority"] = "devrouter.devrouter.svc.cluster.local"
                local resp_headers, resp_body = request_handle:httpCall(
                    "outbound|80||devrouter.devrouter.svc.cluster.local", 
                    in_headers,
                    get_req_body(request_handle),
                    5000)
                request_handle:respond(resp_headers, resp_body)
            end
